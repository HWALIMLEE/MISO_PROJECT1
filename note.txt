pyenv versions : 밑에 가상환경 확인하기
pyenv activate <가상환경 이름> : 가상환경 접속
jupyter kernelspec list : 주피터 커널 이름 확인
jupyter kernelspec unnistall <커널 이름> : 커널 삭제

**jupyterlab 명령어**
1. 커널 추가하고 싶은 가상환경 먼저 들어가기
2. ipykernel 라이브러리 설치하기
>> pip insatll ipykernel
3. jupyter notebook 가상환경안에 kernel설치하기
>> python -m ipykernel insatll --user --name (가상환경 이름) --display-name (커널이름)
4. jupyter notebook에 가상환경 kernel삭제하기
>> jupyter kernelspec uninstall (가상환경 이름)
>> 왜냐면 가상환경 밑에 커널 설치한것이기 때문
>> 이렇게 지워도 원래 가상환경은 지워지지 않음
>> 가상환경 지울때는 remove이용함

**리눅스 명령어 정리**
>> history : 여태까지 썼던 코드 확인
>> history | grep (내가 찾고 싶은 단어) : history안에 내가 찾고 싶은 단어가 포함된 명령어가 표시됨
>> ls : 하위 파일 목록
>> ll : 하위 파일 목록 + 용량
>> nvcc -V : cuda 버전 확인
>> nvidia-smi : 현재 GPU확인
>> scp : jupyterLab ---> ssh [전송할파일][전송받을 서버 사용자명]@[전송받을 서버 ip]:[전송받을 서버의 Directory경로]
   (scp Q_A_dataset_change.csv user05@misodev2:~/.pyenv/versions/nlpqaconda/Q_A_dataset.csv)
   scp : window -----> ssh [전송할파일][전송받을 서버 사용자명]@[전송받을 서버 ip]:[전송받을 서버의 Directory경로]
   (scp Q_A_dataset_change.csv user05@misoinfornd.iptime.org:/home/user05/.pyenv/versions/nlpqaconda/Q_A_dataset.csv)
   scp : 디렉토리 전체 보내기
   (scp -r ./pretrained(보내고 싶은 폴더) user05@misoinfornd.iptime.org:/home/user05/.pyenv/versions/nlpqaconda)
>> wget (링크) : 파일 다운로드
>> cp (복사하고 싶은 파일 이름) (복사본 파일 이름) : 파일 그대로 이름만 바꿔서 복사할 수 있음
>> GPU clear : sudo kill -(id) pid 
(RuntimeError: CUDA error: all CUDA-capable devices are busy or unavailable) <- 이 에러 뜰 때 사용

**가상환경 만드는 법
1. pyenv install anaconda3-5.3.1
2. pyenv activate anaconda3-5.3.1 (활성화 시켜서 확인)
3. pyenv virtualenv anaconda3-5.3.1 (가상환경 이름) >> 내가 만들고 싶은 가상환경 만들기


**데이터 프레임 데이터 수정
>> data['paragraphs'] = data['paragraphs'].apply(lambda x: x.split) : apply,lambda 써주기

**gpu 설정해주기
>> Terminal에서 python code를 실행하는 경우
$CUDA_VISIBLE_DEVICES=0 python my_script.py # Uses GPU 0
$CUDA_VISIBLE_DEVICES=1 python my_script.py # Uses GPU 1
#CUDA_VISIBLE_DIVICES=2,3 python my_script.py # Usese GPUs 2 ad 3.
>> python code에 아래와 같은 코드 추가해도 됨
import os
os.environ["CUDA_DEVICE_ORDER"]='PCI_BUS_ID'
os.environ["CUDA_VISIBLE_DEVICES"]='0'


**tensorflowt 설치하다가 wrapt 에러 뜰 때
################################################
pip install wrapt --upgrade --ignore-installed
pip install tensorflow
#################################################
                  or
#################################################                  
             conda remove wrapt
#################################################

**screen 사용법***

# screen 확인
screen -list --->리스트 확인

# 새로운 세션 생성 및 접속(attach)
screen -S {생성할 이름}
screen -a {생성된 이름}
또는
screen -R {생성할 이름}

# 세션 접속 상태에서 연결이 끊어졌는데 attach로 표시되는 경우
# screen -R을 하면 같은 이름의 다른 세션이 새로 생성되므로 detach필요
screen -D {attach 된 세션}
screen -R {detach 된 세션}

##jupyter에서 하위 파일 용량 확인
!ls -alh ./(확인하고 싶은 폴더)

##파일, 폴더 다른 폴더로 복사하기(ssh에서)
cp (복사하고 싶은 파일) ~/(옮기고 싶은 폴더)
(여기서 '~/' 는 home을 뜻함)

## htop
## watch free
## free -h(free)

# crontab
>> 리눅스 크론탭은 윈도우 스케줄러와 비슷
("특정 시간에 특정 작업을 해야 한다")
1. 크론탭 기본
$ crontab -e  >> 크론탭 설정할 수 있는 장소
$ crontab -l  >> 크론탭 내용 들어있는 지 보기 위해
$ crontab -r  >> 크론탭 지우기

2. 주기 결정
*　　　　　　*　　　　　　*　　　　　　*　　　　　　*
분(0-59)　　시간(0-23)　　일(1-31)　　월(1-12)　　　요일(0-7)


# chmod(change mode의 축약어로, 대상 파일과 디렉토리의 사용권한을 변경할 때 사용
1. 명령어 사용법
chmod [옵션] [모드] [파일]

**옵션
-R: 하위 파일과 디렉토리 모든 권한 변경
-v: 실행되고 있는 모든 파일 나열
-c: 권한이 변경된 파일내용 출력

**mode
r: read(읽기)
w: write(쓰기)
x: excute(실행)

ex) rwxr-xr-x = 755
처음 3개 문자 : user의 권한
중간 3개 문자 : group의 권한
마지막 3개 문자: other의 권한
(r은 4, w=2, x=1) 더해서 7

** jupyter-lab background 실행
>> jupyter notebook &> /dev/null &
