pyenv versions : 밑에 가상환경 확인하기
pyenv activate <가상환경 이름> : 가상환경 접속
jupyter kernelspec list : 주피터 커널 이름 확인
jupyter kernelspec unnistall <커널 이름> : 커널 삭제

**jupyterlab 명령어**
1. 커널 추가하고 싶은 가상환경 먼저 들어가기
2. ipykernel 라이브러리 설치하기
>> pip insatll ipykernel
3. jupyter notebook 가상환경안에 kernel설치하기
>> python -m ipykernel insatll --user --name (가상환경 이름) --display-name (커널이름)
4. jupyter notebook에 가상환경 kernel삭제하기
>> jupyter kernelspec uninstall (가상환경 이름)
>> 왜냐면 가상환경 밑에 커널 설치한거기 때문
>> 이렇게 지워도 원래 가상환경은 지워지지 않음
>> 가상환경 지울때는 remove이용함

**리눅스 명령어 정리**
>> history : 여태까지 썼던 코드 확인
>> history | grep (내가 찾고 싶은 단어) : history안에 내가 찾고 싶은 단어가 포함된 명령어가 표시됨
>> ls : 하위 파일 목록
>> ll : 하위 파일 목록 + 용량
>> nvcc -V : cuda 버전 확인
>> nvidia-smi : 현재 GPU확인
>> scp : jupyterLab ---> ssh [전송할파일][전송받을 서버 사용자명]@[전송받을 서버 ip]:[전송받을 서버의 Directory경로]
   (scp Q_A_dataset_change.csv user05@misodev2:~/.pyenv/versions/nlpqaconda/Q_A_dataset.csv)
>> wget (링크) : 파일 다운로드
>> cp (복사하고 싶은 파일 이름) (복사본 파일 이름) : 파일 그대로 이름만 바꿔서 복사할 수 있음

**가상환경 만드는 법
1. pyenv install anaconda3-5.3.1
2. pyenv activate anaconda3-5.3.1 (활성화 시켜서 확인)
3. pyenv virtualenv anaconda3-5.3.1 (가상환경 이름) >> 내가 만들고 싶은 가상환경 만들기


**데이터 프레임 데이터 수정
>> data['paragraphs'] = data['paragraphs'].apply(lambda x: x.split) : apply,lambda 써주기
